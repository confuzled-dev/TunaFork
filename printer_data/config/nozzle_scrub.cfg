#######################################################################################################################################
#######################################################################################################################################

[gcode_macro clean_nozzle]

variable_location_bucket_rear: True # Only for V2.4. Variables defined below for trident
variable_enable_purge:         True
# If you want a nozzle cleaning, set to True
variable_enable_clean:              True
# If you want a hot to cold cleaning enabled, set to True (and vice versa).
variable_enable_hotcold:            True

# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. The
# ooze dwell variable makes allowance for this. Update as necessary. If you decided to not enable purge, you can ignore this section.
variable_purge_len:            10	         ; Amount of filament, in mm, to purge.
variable_purge_spd:           150	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:      240	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:             5            ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:            5            ; Dwell/wait time, in seconds, after purging and retracting.

# Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_top:            .5

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_clearance_z:           5	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:              5	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:        15000         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1500	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        10000	         ; Nozzle wipe speed in mm/min.

#                  ←   brush_width   →                            
#                   _________________                                                          ↑
#                  |                 |  ↑                     If you chose location_bucket_rear = True, Y position is acquired
#  brush_start (x) |                 | brush_depth            from your stepper_y position_max. Adjust your brush physically in
#                  |_________________|  ↓                               Y so that the nozzle scrubs within the brush.       
#                          (y)                                                                 ↓
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
variable_brush_start:     215
variable_brush_width:     50
variable_brush_front:     305 #only use if rear=fasle above       
variable_brush_depth:     2 #only use if rear=false above         
#                                     bucket_gap
#                                      ← ---- →
#                     __________________________________________
#                    |                 |      |                 |      
#                    |                 |      |                 |
#  bucket_start (x)  |                 |______|                 |
#                    |                 |      |                 |
#                    |                 |      |                 |
#                    |_________________|. . . |_________________|
#                     ← ------------- →        ← ------------- →
#                     bucket_left_width        bucket_right_width
#  _______________________________________________________________________________________
#                                    PRINTER FRONT
# 
variable_bucket_left_width:    36 
variable_bucket_right_width:   36            
variable_bucket_gap:           25	
variable_bucket_start:         186
############################################################################################################################################
##Do not edit below##
# Placeholder. The variable will later be set to contain, at random, a number representing the left or right bucket.
variable_bucket_pos:            1	        

gcode:
   # First, check if the axes are homed.
   {% if "xyz" in printer.toolhead.homed_axes %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle

      ## Set to absolute positioning.
      G90

      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

      ## Check if user enabled purge option or not.
      {% if enable_purge %}

         ### Randomly select left or right bin for purge. 0 = left, 1 = right
         SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}

         ### Raise Z for travel.
         {% if enable_clean %}
            G1 Z{brush_top + clearance_z} F{prep_spd_z}
         {% endif %}

         ### Check if user chose to use rear location.
         {% if location_bucket_rear %}
            G1 Y{Ry} F{prep_spd_xy}
         {% else %}
            G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
         {% endif %}

         ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
         G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         #{% if printer.extruder.temperature >= purge_temp_min %}
         {% if printer.extruder.can_extrude and printer.extruder.target > 0 %}
            M83      ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 5}
            G4 P{ooze_dwell * 1000}
            G92 E0   ; reset extruder
        {% endif %}

      {% endif %}

      {% if enable_clean %}
          ## Set wipe backoffice
          {% set brush_step = brush_width / brush_segments %}
          {% set brush_lanes = [ brush_front, brush_front+brush_depth/3, brush_front+brush_depth/3*2, brush_front+brush_depth ] %}
          {% set brush_zhop  = (brush_top - brush_deep_max) /5 %}
          {% set brush_hops  = [ brush_top, brush_top-brush_zhop, brush_top-brush_zhop*2, brush_top-brush_zhop*3, brush_top-brush_zhop*4, brush_top-brush_zhop*5 ] %}
    
          ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
          G1 Z{brush_top + clearance_z} F{prep_spd_z}
          G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}
    
          ## Check if user chose to use rear location.
          {% if location_bucket_rear %}
             G1 Y{Ry}
          {% else %}
             G1 Y{brush_front + (brush_depth / 2)}
          {% endif %}
    
          ## Move nozzle down into brush.
          G1 Z{brush_top} F{prep_spd_z}
       
          ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
          G1 F{wipe_spd_xy}
          SET_GCODE_VARIABLE MACRO=_clean_nozzle_move  VARIABLE=move VALUE=True
          {% for wipes in range(1, (wipe_qty + 1)) %}
              {%for segments in range(1, (brush_segments+1)) %}
                  _clean_nozzle_move X={brush_start + brush_width*bucket_pos + (1-2*bucket_pos)*brush_step*segments } Y={brush_lanes[range(4)|random]} Z={brush_hops[range(6)|random]}
              {% endfor %}
              {%for segments in range(1, (brush_segments+1)) %}
                  _clean_nozzle_move X={brush_start + brush_width*(1-bucket_pos) - (1-2*bucket_pos)*brush_step*segments } Y={brush_lanes[range(4)|random]} Z={brush_hops[range(6)|random]}
              {% endfor %}
              {% if enable_hotcold == True %}
                  _clean_nozzle_cooldown_check
              {% endif %}
          {% endfor %}
    
       
          ## Clear from area.
          M117 Cleaned!
          G1 Z{brush_top + clearance_z} F{prep_spd_z}
          G91
          G1 X{bucket_left_width / 4} F{prep_spd_xy}
      {% endif %}

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}


###############################################################################################################################################
###############################################################################################################################################

[gcode_macro _clean_nozzle_move]
variable_move: True
gcode:
    
    {% if move == True %}
          {% set x = params.X %}
          {% set y = params.Y %}
          {% set z = params.Z %}
          G1 X{x} Y{y} Z{z}
    {% endif %}

[gcode_macro  _clean_nozzle_cooldown_check]
variable_coolend_target: 200
gcode:
  {% set extruder_temperature = printer[printer.toolhead.extruder].temperature %}
  {% if extruder_temperature <= coolend_target %}
        SET_GCODE_VARIABLE MACRO=_clean_nozzle_move  VARIABLE=move VALUE=False
  {% endif %}

###############################################################################################################################################
###############################################################################################################################################

[gcode_macro CLEAN_HOTCOLD]
variable_temperature_start_offset:   30 
variable_temperature_end_offset:     50 
gcode:
    #{% set extruder_target = printer[printer.toolhead.extruder].target %}
    {% set extruder_target = params.HOT|default(printer[printer.toolhead.extruder].target)|int %}
    {% set extruder_temperature = printer[printer.toolhead.extruder].temperature %}
    {% set coolstart_target = params.COLD_START_TEMP|default(extruder_target - temperature_start_offset) %}
    {% set coolend_target = params.COLD_END_TEMP|default(extruder_target - temperature_end_offset) %}
    {% set min_extrude_temp = printer.configfile.settings.extruder.min_extrude_temp %}
    {% if extruder_target >= min_extrude_temp %}
        SAVE_GCODE_STATE NAME=STATE_CLEAN
        #SET_GCODE_OFFSET Z=0.0                                                        ; reset the G-Code Z offset (adjust Z offset if needed)
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=100            ; do enough wipes so the nozzle has time to cool down
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_clean VALUE=True
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True      ; no purge
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_hotcold VALUE=True     ; hot to cold cleaning
        SET_GCODE_VARIABLE MACRO=_clean_nozzle_cooldown_check VARIABLE=coolend_target VALUE={coolend_target|int}
        M109 S{extruder_target}                                                       ; wait for extruder to reach the target temperature
        M104 S0                                                                       ; cool down during wipes to prevent oozing after wipes
        M106 S256                                                                     ; set fan speed to max to help cooling
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={coolstart_target|int - 5} MAXIMUM={coolstart_target|int}
        CLEAN_NOZZLE                                                                  ; start cleaning
        M106 S0                                                                       ; stop part cooling fan
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_hotcold VALUE=False    ; hot to cold cleaning off
        RESTORE_GCODE_STATE NAME=STATE_CLEAN
    {% endif %}

[gcode_macro CLEAN_PURGE]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    #SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=5
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_clean VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_len VALUE=100
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN

[gcode_macro CLEAN_PRIME]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    #SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=5
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_clean VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_len VALUE=25
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN

[gcode_macro CLEAN_NOPURGE]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    #SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=3
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_clean VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=False
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN

[gcode_macro PURGE_NOCLEAN]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    #SET_GCODE_OFFSET Z=0.0
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_clean VALUE=False
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_len VALUE=100
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_ret VALUE=0.5
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN

[gcode_macro PRIME_NOCLEAN]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    #SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_clean VALUE=False
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_len VALUE=25
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_ret VALUE=0.5
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN
